* pth_waitpid should be implemented for dirmngr, at least for the 
  non-blocking case.

* dirmngr will create one new thread for each pth_accept_ev until a
  connection is accepted, when all these threads will wake up and 
  terminate.  This goes up to 3600 threads (the current max timeout).
  We could limit the timeout by the minimum of all timeout events that
  are passed along with the pth_wait call.  That's one step in the right 
  direction.  Alternatively, we could cancel the threads (but we need to 
  figure out if this is safe---it probably isn't) or wake them up in 
  some other way.  For example, we can have one shared event, a shutdown
  notification, by all select threads in one invocation, and have the 
  threads listen on both the socket and the shutdown event.

* I think the pth_wait on socket implementation leaks event objects.

* The whole wait stuff needs to be cleaned up.  In particular, it is 
  vital that it is clarified which events get reset before pth_wait 
  returns and which are not.  Tentatively I think that none should be 
  reset when returning from pth_wait, but we need to verify that this is 
  correct for the signal events.

* Speaking of signals, that needs to be properly implemented and 
  tested.



